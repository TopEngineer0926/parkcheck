{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _jsxFileName = \"D:\\\\Works\\\\Workspace\\\\Mobile\\\\parkcheck-android-app-master\\\\parkcheck-android-app-master\\\\node_modules\\\\react-native-indicator\\\\lib\\\\loader\\\\TextLoader.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar TextLoader = function (_React$PureComponent) {\n  (0, _inherits2.default)(TextLoader, _React$PureComponent);\n\n  var _super = _createSuper(TextLoader);\n\n  function TextLoader() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, TextLoader);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      opacities: [0, 0, 0]\n    };\n    _this.patterns = [[0, 0, 0], [1, 0, 0], [1, 1, 0], [1, 1, 1]];\n    _this.timers = [];\n\n    _this._animation = function (index) {\n      if (!_this.unmounted) {\n        var id = setTimeout(function () {\n          _this.setState({\n            opacities: _this.patterns[index]\n          });\n\n          index++;\n          if (index >= _this.patterns.length) index = 0;\n\n          _this._animation(index);\n        }, 500);\n\n        _this.timers.push(id);\n      }\n    };\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(TextLoader, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._animation(1);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.unmounted = true;\n      this.timers.forEach(function (id) {\n        clearTimeout(id);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          text = _this$props.text,\n          textStyle = _this$props.textStyle;\n      return _react.default.createElement(_reactNative.View, {\n        style: {\n          flexDirection: 'row'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 7\n        }\n      }, _react.default.createElement(_reactNative.Text, {\n        style: textStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 9\n        }\n      }, text), this.state.opacities.map(function (item, i) {\n        return _react.default.createElement(_reactNative.Text, {\n          key: i,\n          style: [{\n            opacity: item\n          }, textStyle],\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 11\n          }\n        }, \".\");\n      }));\n    }\n  }]);\n  return TextLoader;\n}(_react.default.PureComponent);\n\nexports.default = TextLoader;\nTextLoader.propTypes = {\n  text: _propTypes.default.string,\n  textStyle: _reactNative.Text.propTypes.style\n};\nTextLoader.defaultProps = {\n  text: 'Loading'\n};","map":{"version":3,"sources":["D:/Works/Workspace/Mobile/parkcheck-android-app-master/parkcheck-android-app-master/node_modules/react-native-indicator/lib/loader/TextLoader.js"],"names":["TextLoader","state","opacities","patterns","timers","_animation","index","unmounted","id","setTimeout","setState","length","push","forEach","clearTimeout","props","text","textStyle","flexDirection","map","item","i","opacity","React","PureComponent","propTypes","PropTypes","string","Text","style","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;IAEqBA,U;;;;;;;;;;;;;;;UAUnBC,K,GAAQ;AACNC,MAAAA,SAAS,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AADL,K;UAGRC,Q,GAAW,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAD,EAAY,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAZ,EAAuB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAvB,EAAkC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAlC,C;UACXC,M,GAAS,E;;UAaTC,U,GAAa,UAACC,KAAD,EAAW;AACtB,UAAI,CAAC,MAAKC,SAAV,EAAqB;AACnB,YAAMC,EAAE,GAAGC,UAAU,CAAC,YAAM;AAC1B,gBAAKC,QAAL,CAAc;AAAER,YAAAA,SAAS,EAAE,MAAKC,QAAL,CAAcG,KAAd;AAAb,WAAd;;AACAA,UAAAA,KAAK;AACL,cAAIA,KAAK,IAAI,MAAKH,QAAL,CAAcQ,MAA3B,EAAmCL,KAAK,GAAG,CAAR;;AACnC,gBAAKD,UAAL,CAAgBC,KAAhB;AACD,SALoB,EAKlB,GALkB,CAArB;;AAMA,cAAKF,MAAL,CAAYQ,IAAZ,CAAiBJ,EAAjB;AACD;AACF,K;;;;;;;wCArBmB;AAClB,WAAKH,UAAL,CAAgB,CAAhB;AACD;;;2CAEsB;AACrB,WAAKE,SAAL,GAAiB,IAAjB;AACA,WAAKH,MAAL,CAAYS,OAAZ,CAAoB,UAACL,EAAD,EAAQ;AAC1BM,QAAAA,YAAY,CAACN,EAAD,CAAZ;AACD,OAFD;AAGD;;;6BAcQ;AAAA;;AAAA,wBACqB,KAAKO,KAD1B;AAAA,UACCC,IADD,eACCA,IADD;AAAA,UACOC,SADP,eACOA,SADP;AAEP,aACE,6BAAC,iBAAD;AAAM,QAAA,KAAK,EAAE;AAAEC,UAAAA,aAAa,EAAE;AAAjB,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,6BAAC,iBAAD;AAAM,QAAA,KAAK,EAAED,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAyBD,IAAzB,CADF,EAEG,KAAKf,KAAL,CAAWC,SAAX,CAAqBiB,GAArB,CAAyB,UAACC,IAAD,EAAOC,CAAP;AAAA,eACxB,6BAAC,iBAAD;AAAM,UAAA,GAAG,EAAEA,CAAX;AAAc,UAAA,KAAK,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEF;AAAX,WAAD,EAAoBH,SAApB,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADwB;AAAA,OAAzB,CAFH,CADF;AAUD;;;EAnDqCM,eAAMC,a;;;AAAzBxB,U,CACZyB,S,GAAY;AACjBT,EAAAA,IAAI,EAAEU,mBAAUC,MADC;AAEjBV,EAAAA,SAAS,EAAEW,kBAAKH,SAAL,CAAeI;AAFT,C;AADA7B,U,CAMZ8B,Y,GAAe;AACpBd,EAAAA,IAAI,EAAE;AADc,C","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Text, View } from 'react-native';\n\nexport default class TextLoader extends React.PureComponent {\n  static propTypes = {\n    text: PropTypes.string,\n    textStyle: Text.propTypes.style,\n  };\n\n  static defaultProps = {\n    text: 'Loading',\n  };\n\n  state = {\n    opacities: [0, 0, 0],\n  };\n  patterns = [[0, 0, 0], [1, 0, 0], [1, 1, 0], [1, 1, 1]];\n  timers = [];\n\n  componentDidMount() {\n    this._animation(1);\n  }\n\n  componentWillUnmount() {\n    this.unmounted = true;\n    this.timers.forEach((id) => {\n      clearTimeout(id);\n    });\n  }\n\n  _animation = (index) => {\n    if (!this.unmounted) {\n      const id = setTimeout(() => {\n        this.setState({ opacities: this.patterns[index] });\n        index++;\n        if (index >= this.patterns.length) index = 0;\n        this._animation(index);\n      }, 500);\n      this.timers.push(id);\n    }\n  };\n\n  render() {\n    const { text, textStyle } = this.props;\n    return (\n      <View style={{ flexDirection: 'row' }}>\n        <Text style={textStyle}>{text}</Text>\n        {this.state.opacities.map((item, i) => (\n          <Text key={i} style={[{ opacity: item }, textStyle]}>\n            .\n          </Text>\n        ))}\n      </View>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}