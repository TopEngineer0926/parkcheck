{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _art = require(\"@react-native-community/art\");\n\nvar _AnimatedCircle = _interopRequireDefault(require(\"../animated/AnimatedCircle\"));\n\nvar _const = require(\"../const\");\n\nvar _jsxFileName = \"D:\\\\Works\\\\Workspace\\\\Mobile\\\\parkcheck-android-app-master\\\\parkcheck-android-app-master\\\\node_modules\\\\react-native-indicator\\\\lib\\\\loader\\\\BreathingLoader.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar BreathingLoader = function (_React$PureComponent) {\n  (0, _inherits2.default)(BreathingLoader, _React$PureComponent);\n\n  var _super = _createSuper(BreathingLoader);\n\n  function BreathingLoader(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, BreathingLoader);\n    _this = _super.call(this, props);\n\n    _this._animation = function () {\n      _reactNative.Animated.sequence([_reactNative.Animated.timing(_this.state.scale, {\n        toValue: 1,\n        duration: _this.props.frequency,\n        useNativeDriver: false\n      }), _reactNative.Animated.timing(_this.state.scale, {\n        toValue: 0.1,\n        duration: _this.props.frequency,\n        useNativeDriver: false\n      })]).start(function () {\n        !_this.unmounted && _this._animation();\n      });\n    };\n\n    _this.state = {\n      scale: new _reactNative.Animated.Value(0.1)\n    };\n    return _this;\n  }\n\n  (0, _createClass2.default)(BreathingLoader, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._animation();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.unmounted = true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          color = _this$props.color,\n          size = _this$props.size,\n          strokeWidth = _this$props.strokeWidth;\n      return _react.default.createElement(_art.Surface, {\n        width: size + strokeWidth,\n        height: size + strokeWidth,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 7\n        }\n      }, _react.default.createElement(_AnimatedCircle.default, {\n        radius: size,\n        stroke: color,\n        strokeWidth: strokeWidth,\n        scale: this.state.scale,\n        x: (size + strokeWidth) / 2,\n        y: (size + strokeWidth) / 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n  return BreathingLoader;\n}(_react.default.PureComponent);\n\nexports.default = BreathingLoader;\nBreathingLoader.propTypes = {\n  color: _propTypes.default.string,\n  size: _propTypes.default.number,\n  strokeWidth: _propTypes.default.number,\n  frequency: _propTypes.default.number\n};\nBreathingLoader.defaultProps = {\n  color: _const.color,\n  size: 30,\n  strokeWidth: 3,\n  frequency: 800\n};","map":{"version":3,"sources":["D:/Works/Workspace/Mobile/parkcheck-android-app-master/parkcheck-android-app-master/node_modules/react-native-indicator/lib/loader/BreathingLoader.js"],"names":["BreathingLoader","props","_animation","Animated","sequence","timing","state","scale","toValue","duration","frequency","useNativeDriver","start","unmounted","Value","color","size","strokeWidth","React","PureComponent","propTypes","PropTypes","string","number","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;IAEqBA,e;;;;;AAenB,2BAAYC,KAAZ,EAAmB;AAAA;;AAAA;AACjB,8BAAMA,KAAN;;AADiB,UAenBC,UAfmB,GAeN,YAAM;AACjBC,4BAASC,QAAT,CAAkB,CAChBD,sBAASE,MAAT,CAAgB,MAAKC,KAAL,CAAWC,KAA3B,EAAkC;AAChCC,QAAAA,OAAO,EAAE,CADuB;AAEhCC,QAAAA,QAAQ,EAAE,MAAKR,KAAL,CAAWS,SAFW;AAGhCC,QAAAA,eAAe,EAAE;AAHe,OAAlC,CADgB,EAMhBR,sBAASE,MAAT,CAAgB,MAAKC,KAAL,CAAWC,KAA3B,EAAkC;AAChCC,QAAAA,OAAO,EAAE,GADuB;AAEhCC,QAAAA,QAAQ,EAAE,MAAKR,KAAL,CAAWS,SAFW;AAGhCC,QAAAA,eAAe,EAAE;AAHe,OAAlC,CANgB,CAAlB,EAWGC,KAXH,CAWS,YAAM;AACb,SAAC,MAAKC,SAAN,IAAmB,MAAKX,UAAL,EAAnB;AACD,OAbD;AAcD,KA9BkB;;AAEjB,UAAKI,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,IAAIJ,sBAASW,KAAb,CAAmB,GAAnB;AADI,KAAb;AAFiB;AAKlB;;;;wCAEmB;AAClB,WAAKZ,UAAL;AACD;;;2CAEsB;AACrB,WAAKW,SAAL,GAAiB,IAAjB;AACD;;;6BAmBQ;AAAA,wBAC8B,KAAKZ,KADnC;AAAA,UACCc,KADD,eACCA,KADD;AAAA,UACQC,IADR,eACQA,IADR;AAAA,UACcC,WADd,eACcA,WADd;AAEP,aACE,6BAAC,YAAD;AAAS,QAAA,KAAK,EAAED,IAAI,GAAGC,WAAvB;AAAoC,QAAA,MAAM,EAAED,IAAI,GAAGC,WAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,6BAAC,uBAAD;AACE,QAAA,MAAM,EAAED,IADV;AAEE,QAAA,MAAM,EAAED,KAFV;AAGE,QAAA,WAAW,EAAEE,WAHf;AAIE,QAAA,KAAK,EAAE,KAAKX,KAAL,CAAWC,KAJpB;AAKE,QAAA,CAAC,EAAE,CAACS,IAAI,GAAGC,WAAR,IAAuB,CAL5B;AAME,QAAA,CAAC,EAAE,CAACD,IAAI,GAAGC,WAAR,IAAuB,CAN5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAYD;;;EA7D0CC,eAAMC,a;;;AAA9BnB,e,CACZoB,S,GAAY;AACjBL,EAAAA,KAAK,EAAEM,mBAAUC,MADA;AAEjBN,EAAAA,IAAI,EAAEK,mBAAUE,MAFC;AAGjBN,EAAAA,WAAW,EAAEI,mBAAUE,MAHN;AAIjBb,EAAAA,SAAS,EAAEW,mBAAUE;AAJJ,C;AADAvB,e,CAQZwB,Y,GAAe;AACpBT,EAAAA,KAAK,EAALA,YADoB;AAEpBC,EAAAA,IAAI,EAAE,EAFc;AAGpBC,EAAAA,WAAW,EAAE,CAHO;AAIpBP,EAAAA,SAAS,EAAE;AAJS,C","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated } from 'react-native';\nimport { Surface } from '@react-native-community/art';\nimport AnimatedCircle from '../animated/AnimatedCircle';\nimport { color } from '../const';\n\nexport default class BreathingLoader extends React.PureComponent {\n  static propTypes = {\n    color: PropTypes.string,\n    size: PropTypes.number,\n    strokeWidth: PropTypes.number,\n    frequency: PropTypes.number,\n  };\n\n  static defaultProps = {\n    color,\n    size: 30,\n    strokeWidth: 3,\n    frequency: 800,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      scale: new Animated.Value(0.1),\n    };\n  }\n\n  componentDidMount() {\n    this._animation();\n  }\n\n  componentWillUnmount() {\n    this.unmounted = true;\n  }\n\n  _animation = () => {\n    Animated.sequence([\n      Animated.timing(this.state.scale, {\n        toValue: 1,\n        duration: this.props.frequency,\n        useNativeDriver: false,\n      }),\n      Animated.timing(this.state.scale, {\n        toValue: 0.1,\n        duration: this.props.frequency,\n        useNativeDriver: false,\n      }),\n    ]).start(() => {\n      !this.unmounted && this._animation();\n    });\n  };\n\n  render() {\n    const { color, size, strokeWidth } = this.props;\n    return (\n      <Surface width={size + strokeWidth} height={size + strokeWidth}>\n        <AnimatedCircle\n          radius={size}\n          stroke={color}\n          strokeWidth={strokeWidth}\n          scale={this.state.scale}\n          x={(size + strokeWidth) / 2}\n          y={(size + strokeWidth) / 2}\n        />\n      </Surface>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}