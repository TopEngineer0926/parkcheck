{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeElements = require(\"react-native-elements\");\n\nvar _datetimepicker = _interopRequireDefault(require(\"@react-native-community/datetimepicker\"));\n\nvar _FontAwesome = _interopRequireDefault(require(\"react-native-vector-icons/FontAwesome\"));\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\Works\\\\Workspace\\\\Mobile\\\\parkcheck-android-app-master\\\\parkcheck-android-app-master\\\\src\\\\components\\\\mTimePicker.js\";\n\nvar MyTimePicker = function MyTimePicker(props) {\n  var today = new Date();\n\n  var _useState = (0, _react.useState)(props.order == 'from' ? new Date(today.getTime() - 10 * 60000) : today),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      date = _useState2[0],\n      setDate = _useState2[1];\n\n  var _useState3 = (0, _react.useState)('date'),\n      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n      mode = _useState4[0],\n      setMode = _useState4[1];\n\n  var _useState5 = (0, _react.useState)(false),\n      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),\n      show = _useState6[0],\n      setShow = _useState6[1];\n\n  var onChange = function onChange(event, selectedDate) {\n    var currentDate = selectedDate || date;\n    setShow(_reactNative.Platform.OS === 'ios');\n    setDate(currentDate);\n    props.onSelectTime((\"0\" + currentDate.getHours()).slice(-2) + ':' + (\"0\" + currentDate.getMinutes()).slice(-2));\n  };\n\n  var showMode = function showMode(currentMode) {\n    setShow(true);\n    setMode(currentMode);\n  };\n\n  var showTimepicker = function showTimepicker() {\n    showMode('time');\n  };\n\n  (0, _react.useEffect)(function () {\n    onChange();\n  }, []);\n  return _react.default.createElement(_reactNative.View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, _react.default.createElement(_reactNative.TouchableOpacity, {\n    style: styles.touchableContain,\n    activeOpacity: .5,\n    onPress: showTimepicker,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, _react.default.createElement(_FontAwesome.default, {\n    name: \"clock-o\",\n    size: 23,\n    color: \"#126FEA\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 21\n    }\n  }), _react.default.createElement(_reactNative.Text, {\n    style: styles.item,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 21\n    }\n  }, (\"0\" + date.getHours()).slice(-2) + ':' + (\"0\" + date.getMinutes()).slice(-2))), show && _react.default.createElement(_datetimepicker.default, {\n    testID: \"dateTimePicker\",\n    value: date,\n    mode: mode,\n    is24Hour: true,\n    display: \"default\",\n    onChange: onChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  }));\n};\n\nvar _default = MyTimePicker;\nexports.default = _default;\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    width: \"60%\"\n  },\n  item: {\n    fontSize: 23,\n    textAlign: 'center',\n    color: 'black',\n    marginLeft: 20\n  },\n  touchableContain: {\n    display: 'flex',\n    flexDirection: 'row',\n    textAlign: 'center',\n    color: 'black',\n    borderBottomWidth: 0.8,\n    borderBottomColor: 'grey',\n    alignItems: 'center',\n    paddingLeft: '10%'\n  }\n});","map":{"version":3,"sources":["D:/Works/Workspace/Mobile/parkcheck-android-app-master/parkcheck-android-app-master/src/components/mTimePicker.js"],"names":["MyTimePicker","props","today","Date","order","getTime","date","setDate","mode","setMode","show","setShow","onChange","event","selectedDate","currentDate","Platform","OS","onSelectTime","getHours","slice","getMinutes","showMode","currentMode","showTimepicker","styles","container","touchableContain","item","StyleSheet","create","width","fontSize","textAlign","color","marginLeft","display","flexDirection","borderBottomWidth","borderBottomColor","alignItems","paddingLeft"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {View, TouchableOpacity, Platform, StyleSheet, Text} from 'react-native';\nimport {Input} from 'react-native-elements'\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport Icon from 'react-native-vector-icons/FontAwesome';\n\nconst MyTimePicker = (props) => {\n\n    const today = new Date();\n    \n    const [date, setDate] = useState(props.order == 'from' ? new Date(today.getTime() - 10 * 60000) : today);\n    const [mode, setMode] = useState('date');\n    const [show, setShow] = useState(false);\n  \n    const onChange = (event, selectedDate) => {\n      const currentDate = selectedDate || date;\n      setShow(Platform.OS === 'ios');\n      setDate(currentDate);\n      props.onSelectTime((\"0\" + currentDate.getHours()).slice(-2) + ':' + (\"0\" + currentDate.getMinutes()).slice(-2));\n      \n    };\n  \n    const showMode = currentMode => {\n      setShow(true);\n      setMode(currentMode);\n    };\n  \n    const showTimepicker = () => {\n      showMode('time');\n    };\n\n    useEffect(() => {\n      onChange();\n    },[]);\n  \n    return (\n      <View style={styles.container}>\n        {/* <View>\n          <Button style={styles.item} onPress={showTimepicker} title={date.getHours() + ':' + date.getMinutes()} />\n        </View> */}\n        <TouchableOpacity \n            style={styles.touchableContain}\n            activeOpacity={.5} \n            onPress={showTimepicker}>\n                    <Icon name=\"clock-o\" size={23} color=\"#126FEA\" /> \n                    <Text style={styles.item}>{(\"0\" + date.getHours()).slice(-2) + ':' + (\"0\" + date.getMinutes()).slice(-2)}</Text>\n        </TouchableOpacity>\n        {show && (\n          <DateTimePicker\n            testID=\"dateTimePicker\"\n            value={date}\n            mode={mode}\n            is24Hour={true}\n            display=\"default\"\n            onChange={onChange}\n          />\n        )}\n      </View>\n    );\n};\n\nexport default MyTimePicker;\n\nconst styles = StyleSheet.create({\n    container: {\n        width: \"60%\"\n    },\n    item: {\n      fontSize: 23,\n      textAlign: 'center',\n      color: 'black',\n      marginLeft: 20\n    },\n    touchableContain: {\n      display: 'flex',\n      flexDirection: 'row',\n      textAlign: 'center',\n      color: 'black',\n      borderBottomWidth: 0.8,\n      borderBottomColor: 'grey',\n      alignItems: 'center',\n      paddingLeft: '10%'\n    }\n});"]},"metadata":{},"sourceType":"script"}