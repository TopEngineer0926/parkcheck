{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _datetimepicker = _interopRequireDefault(require(\"@react-native-community/datetimepicker\"));\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\Works\\\\Workspace\\\\Mobile\\\\parkcheck-android-app-master\\\\parkcheck-android-app-master\\\\src\\\\components\\\\mDatePicker.js\";\n\nvar MyDatePicker = function MyDatePicker(props) {\n  var today = new Date();\n  var months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\n  var _useState = (0, _react.useState)(today),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      date = _useState2[0],\n      setDate = _useState2[1];\n\n  var _useState3 = (0, _react.useState)('date'),\n      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n      mode = _useState4[0],\n      setMode = _useState4[1];\n\n  var _useState5 = (0, _react.useState)(false),\n      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),\n      show = _useState6[0],\n      setShow = _useState6[1];\n\n  var onChange = function onChange(event, selectedDate) {\n    var currentDate = selectedDate || date;\n    setShow(_reactNative.Platform.OS === 'ios');\n    setDate(currentDate);\n    var fullDate = (\"0\" + currentDate.getDate()).slice(-2) + '.' + (\"0\" + (currentDate.getMonth() + 1)).slice(-2) + '.' + currentDate.getFullYear();\n    props.onSelectDate(fullDate);\n  };\n\n  var showMode = function showMode(currentMode) {\n    setShow(true);\n    setMode(currentMode);\n  };\n\n  var showDatepicker = function showDatepicker() {\n    showMode('date');\n  };\n\n  var showTimepicker = function showTimepicker() {\n    showMode('time');\n  };\n\n  (0, _react.useEffect)(function () {\n    return onChange(today);\n  });\n  return _react.default.createElement(_reactNative.View, {\n    style: {\n      width: props.width\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(_reactNative.View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, _react.default.createElement(_reactNative.Text, {\n    onPress: showDatepicker,\n    style: styles.common,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, (\"0\" + date.getDate()).slice(-2) + '.' + (\"0\" + (date.getMonth() + 1)).slice(-2) + '.' + date.getFullYear())), show && _react.default.createElement(_datetimepicker.default, {\n    testID: \"dateTimePicker\",\n    value: date,\n    mode: mode,\n    is24Hour: true,\n    display: \"default\",\n    onChange: onChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }));\n};\n\nvar _default = MyDatePicker;\nexports.default = _default;\n\nvar styles = _reactNative.StyleSheet.create({\n  common: {\n    fontSize: 23,\n    paddingBottom: 3,\n    paddingLeft: 10\n  }\n});","map":{"version":3,"sources":["D:/Works/Workspace/Mobile/parkcheck-android-app-master/parkcheck-android-app-master/src/components/mDatePicker.js"],"names":["MyDatePicker","props","today","Date","months","date","setDate","mode","setMode","show","setShow","onChange","event","selectedDate","currentDate","Platform","OS","fullDate","getDate","slice","getMonth","getFullYear","onSelectDate","showMode","currentMode","showDatepicker","showTimepicker","width","styles","common","StyleSheet","create","fontSize","paddingBottom","paddingLeft"],"mappings":"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","sourcesContent":["import React, {useState, useEffect } from 'react';\nimport {View, Text, Platform, StyleSheet} from 'react-native';\nimport DateTimePicker from '@react-native-community/datetimepicker';\n\nconst MyDatePicker = (props) => {\n\n  const today = new Date();\n  const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  // const [date, setDate] = useState(new Date(today));\n  const [date, setDate] = useState(today);\n  const [mode, setMode] = useState('date');\n  const [show, setShow] = useState(false);\n\n  const onChange = (event, selectedDate) => {\n    const currentDate = selectedDate || date;\n    setShow(Platform.OS === 'ios');\n    setDate(currentDate);\n\n    let fullDate = (\"0\" + currentDate.getDate()).slice(-2) + '.' + (\"0\" + (currentDate.getMonth() + 1)).slice(-2) + '.' + currentDate.getFullYear()\n    props.onSelectDate(fullDate);\n  };\n\n  const showMode = currentMode => {\n    setShow(true);\n    setMode(currentMode);\n  };\n\n  const showDatepicker = () => {\n    showMode('date');\n  };\n\n  const showTimepicker = () => {\n    showMode('time');\n  };\n\n\n  useEffect(() => onChange(today));\n\n  return (\n    // <View style={{width: \"100%\"}}>\n    <View style={{width: props.width}}>\n      <View>\n        <Text onPress={showDatepicker} style={styles.common}>\n            {(\"0\" + date.getDate()).slice(-2)+'.'+ (\"0\" + (date.getMonth()+1)).slice(-2) +'.'+date.getFullYear()}\n        </Text>\n      </View>\n      {/* <View>\n        <Button onPress={showTimepicker} title=\"Show time picker!\" />\n      </View> */}\n      {show && (\n        <DateTimePicker\n          testID=\"dateTimePicker\"\n          value={date}\n          mode={mode}\n          is24Hour={true}\n          display=\"default\"\n          onChange={onChange}\n        />\n      )}\n    </View>\n  );\n};\n\nexport default MyDatePicker;\n\nconst styles = StyleSheet.create({\n    common: {\n        fontSize: 23,\n        paddingBottom: 3,\n        paddingLeft: 10\n    }\n});"]},"metadata":{},"sourceType":"script"}